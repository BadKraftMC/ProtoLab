namespace ProtoLab.OpenTest;

public class AgentLogger
{
    private static readonly Lazy<AgentLogger> lazyLogger = new(() => new());
    private static readonly Stream writer = new MemoryStream();

    private TextWriter Writer { get; set; }
    private bool IsConfigured => Writer != null;

    public static AgentLogger GetLogger => lazyLogger.IsValueCreated ? lazyLogger.Value : throw new InvalidOperationException("Logger must be configured with output stream prior to reference.");
    public Encoding Encoder { get; set; } = Encoding.UTF8;

    private AgentLogger() { }

    /// <summary>
    /// Configures only once regardless of new stream
    /// </summary>
    public static AgentLogger Configure(Stream outStream)
    {
        AgentLogger logger = lazyLogger.Value;

        if (!logger.IsConfigured)
        {
            logger.Writer = new LogWriter(outStream);
        }

        return logger;
    }

    public void Write(string logEntry)
    {
        Writer.Write(logEntry);
    }

    public void WriteLine(string logEntry)
    {
        Writer.WriteLine(logEntry);
    }


    private class LogWriter : StreamWriter
    {

        public LogWriter(Stream stream) : base(stream)
        {
            AutoFlush = true;
            Console.SetOut(this);
        }

        public override void Write(ReadOnlySpan<char> buffer)
        {
            base.Write(buffer);
        }

        public override void WriteLine(ReadOnlySpan<char> buffer)
        {
            base.WriteLine(buffer);
        }
    }
}
