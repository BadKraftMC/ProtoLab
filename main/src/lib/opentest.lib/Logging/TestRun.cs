
using System.Text.Json.Serialization;

namespace ProtoLab.OpenTest;

public class TestRun
{
    [JsonIgnore]
    internal TestOutput Current { get; private set; }

    public string Test { get; }
    public List<TestOutput> Results { get; } = new();

    public TestRun(string testName) =>
        Test = testName;

    internal void BeginTest(string func, string message)
    {
        Current = new TestRunResult(func, message);
        Results.Add(Current);
    }

    internal void EndTest() =>
        Current = null;

    internal void Log(string logEntry)
    {
        if (Current is TestRunResult)
        {
            EndTest();
            Current = new TestRunMessages();

            Results.Add(Current);
        }

        Current.Log(logEntry);
    }
}

public abstract class TestOutput
{
    public abstract void Log(string logEntry);
    public virtual void Set<T>(string property, T value) { }
}

public class TestRunMessages : TestOutput
{
    private readonly List<string> messages = new();

    public string[] Messages => messages.ToArray();

    public override void Log(string logEntry)
    {
        messages.Add(logEntry);
    }
}

public class TestRunResult : TestOutput
{
    private readonly List<string> messages = new();

    public string Test { get; }
    public string Result { get; }
    public string[] Messages => messages.ToArray();
    public double Elapsed { get; private set; }

    public TestRunResult(string func, string result)
    {
        Test = func;
        Result = result;
    }

    public override void Log(string logEntry)
    {
        messages.Add(logEntry);
    }
    public override void Set<T>(string property, T value)
    {
        switch (property)
        {
            case "Elapsed":
                //  ensures a double is persisted
                if (double.TryParse($"{value}", out double elapsed))
                { Elapsed = elapsed; }

                break;
        }
    }
}