using System.Text.Json.Serialization;

namespace ProtoLab.OpenTest;

public partial class TestSetCollection
{
    private Dictionary<Type, List<MethodInfo>> TestSets { get; init; }

    public TestSetCollection(Dictionary<Type, List<MethodInfo>> testSets)
    {
        //  copy the test set dictionary
        TestSets = testSets
            .ToDictionary(e => e.Key, e => e.Value);
    }

    public IEnumerator<TestSet> GetTestSetIterator()
    {
        foreach (var set in TestSets)
        {
            yield return new DefaultTestSet(set);
        }
    }
}

public class TestRunCollection
{
    [JsonIgnore]
    private TestContext Context => TestContext.Current;

    [JsonIgnore]
    public TestRun Current { get; private set; }

    public string Assembly { get; }
    /// <summary>
    /// Name of test set (class) and the test runs discovered
    /// TODO: add TestRun.Ignored (TRUE/FALSE)
    /// </summary>
    public Dictionary<string, List<TestRun>> Tests { get; } = new();
    public double TotalElapsed { get; internal set; }

    internal TestRunCollection(Assembly assembly)
    {
        Assembly = assembly.GetName().Name;
    }

    internal TestRun Add(TestRun test)
    {
        if (!Tests.TryGetValue(Context.SetName, out List<TestRun> runs))
        {
            Tests.Add(Context.SetName, runs = new());
        }

        runs.Add(test);

        return test;
    }
    internal void SetCurrent(TestRun test)
    {
        Current = test;
    }
}