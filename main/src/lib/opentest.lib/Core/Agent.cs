namespace ProtoLab.OpenTest;

public class Agent
{
    private TestContext Context { get; } = TestContext.Current;
    private TestSetCollection TestSets { get; init; }
    private List<TestCase> TestCases { get; } = new();

    internal TestSet TestSet { get; private set; }
    internal CaseLogs TestCaseLogs { get; private set; }

    internal Agent(Assembly assembly, Dictionary<Type, List<MethodInfo>> testSets)
    {
        TestSets = new(testSets)
        {
            Assembly = assembly.GetName().Name
        };
    }

    public void Configure(Assembly assembly) { }
    public void Start()
    {
        var testSets = TestSets.GetTestSetIterator();
        while (testSets.MoveNext())
        {
            TestSet = testSets.Current;

            var testCases = TestSet.GetMethodIterator();

            if (TestSet.HasTestCases())
            {
                object target = TestSet.ConstructTestTarget();

                while (testCases.MoveNext())
                {
                    TestCase tc = testCases.Current;

                    try
                    {
                        TestCaseLogs = tc.CaseLogs;
                        tc.BeginTest(target);

                        //  technically, we are done with the test assertion so we should "close" the current run output
                        tc.EndTest();
                        TestCases.Add(tc);
                    }
                    catch (Exception ex)
                    {
                        TestCaseLogs.Output.Set("Exception", ex.Message);
                    }
                }

                TestCaseLogs = null;
            }
        }
    }
    public AgentTestCaseResultLogs GetResultLogs()
    {
        string asmName = TestSets.Assembly;
        CaseLogs[] results = TestCases
            .Select(tc => tc.CaseLogs)
            .ToArray();

        return new()
        {
            Assembly = asmName,
            TestSet = results
        };
    }
}
