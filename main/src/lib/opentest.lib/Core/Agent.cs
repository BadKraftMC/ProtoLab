namespace ProtoLab.OpenTest;

public class Agent
{
    private TestSetCollection TestSets { get; init; }
    private TestContext Context { get; } = TestContext.Current;

    private Logger Logger { get; } = Logger.GetLogger;

    public Agent(Dictionary<Type, List<MethodInfo>> testSets)
    {
        TestSets = new(testSets);
    }

    public void Configure(Assembly assembly)
    {
        Context.Set(assembly);
    }
    public void Start()
    {
        var iterator = TestSets.GetTestSetIterator();
        while (iterator.MoveNext())
        {
            Context.Set(iterator.Current);

            var setName = Context.SetName;
            var testMethods = Context.GetMethodIterator();

            if (Context.TestMethods.Any())
            {
                Logger.WriteLine($"Discovered {setName}: [{string.Join("|", Context.TestMethods)}]");
                object target = Context.ConstructTestTarget();

                Logger.WriteLine($"== Begin == [ {setName} ] ===================================");
                Stopwatch sw;
                TimeSpan time = new TimeSpan(0);

                sw = InitializeStopwatch();

                while (testMethods.MoveNext())
                {
                    MethodInfo tm = testMethods.Current;
                    TestRun testRun = Context.TestRuns.Add(new(tm.Name));

                    try
                    {
                        Logger.Write($"{"":15} == [ == {tm.Name:-35} == ] {"":15}");
                        //  set the current TestRun so other objects can access it
                        Context.TestRuns.SetCurrent(testRun);

                        var elapsed = ExecuteTest(sw, () => tm.Invoke(target, null));
                        sw.Reset();

                        testRun.Current.Set("Elapsed", elapsed.TotalMilliseconds);
                        Logger.WriteLine($"\t {elapsed.Milliseconds}ms");
                        //  technically, we are done with the test assertion so we should "close" the current run output
                        testRun.EndTest();

                        time += elapsed;
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLine($"{ex}");
                    }

                    Context.TestRuns.TotalElapsed = time.TotalMilliseconds;
                    Context.OutputResults(Console.WriteLine);
                }

                //  set current TestRun to null
                Context.TestRuns.SetCurrent(null);

                Logger.WriteLine($"===  End  =========================================== {time.TotalMilliseconds:5}ms");
                Context.Clear();
            }
        }
    }

    private TimeSpan ExecuteTest(Stopwatch sw, Action test)
    {
        sw.Start();
        test();
        sw.Stop();

        return sw.Elapsed;
    }

    private static Stopwatch InitializeStopwatch()
    {
        Stopwatch sw = new();
        sw.Start();
        sw.Restart();

        return sw;
    }
}
