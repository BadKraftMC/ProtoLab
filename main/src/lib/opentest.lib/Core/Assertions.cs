namespace ProtoLab.OpenTest;

public static class Assertions
{
    const string PASS = "Pass";
    const string FAIL = "Fail";

    #region Assertions
    public static void IsTrue(this TestAssert assert, bool condition, string message = "")
    {
        Agent agent = assert();
        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, nameof(IsTrue), condition ? PASS : FAIL, message);
        agent.TestCaseLogs.EndAssert();
    }
    public static void IsFalse(this TestAssert assert, bool condition, string message = "")
    {
        Agent agent = assert();
        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, nameof(IsFalse), !condition ? PASS : FAIL, message);
        agent.TestCaseLogs.EndAssert();
    }
    public static void AreEqual<T>(this TestAssert assert, T expected, T actual, string message = "")
    {
        Agent agent = assert();

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, nameof(AreEqual), Assert(() => expected.Equals(actual), out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Type     {GetJsonSafeTypeName<T>()}");
            assert.Log($"Expected ({expected})");
            assert.Log($"Actual   ({actual})");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void AreEqual<T>(this TestAssertVerbose assert, T expected, T actual, string message = "")
    {
        Agent agent = assert(true);

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, $"{$"[{nameof(AreEqual)}]",-13}:: EXP({expected}) ACT({actual})", Assert(() => expected.Equals(actual), out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Type     {GetJsonSafeTypeName<T>()}");
            assert.Log($"Expected ({expected})");
            assert.Log($"Actual   ({actual})");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void AreNotEqual<T>(this TestAssert assert, T expected, T actual, string message = "")
    {
        Agent agent = assert();

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, nameof(AreNotEqual), Assert(() => !expected.Equals(actual), out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Type     {GetJsonSafeTypeName<T>()}");
            assert.Log($"Expected ({expected})");
            assert.Log($"Actual   ({actual})");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void AreNotEqual<T>(this TestAssertVerbose assert, T expected, T actual, string message = "")
    {
        Agent agent = assert(true);

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, $"{$"[{nameof(AreNotEqual)}]",-13}:: EXP({expected}) ACT({actual})", Assert(() => !expected.Equals(actual), out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Type     {GetJsonSafeTypeName<T>()}");
            assert.Log($"Expected ({expected})");
            assert.Log($"Actual   ({actual})");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void IsNull<T>(this TestAssert assert, T p, string message = "")
    {
        Agent agent = assert();

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, nameof(IsNull), Assert(() => p is null, out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Type     {GetJsonSafeTypeName<T>()}");
            assert.Log($"Expected (NULL)");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void IsNotNull<T>(this TestAssert assert, T p, string message = "")
    {
        Agent agent = assert();

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, nameof(IsNotNull), Assert(() => p is not null, out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Type     {GetJsonSafeTypeName<T>()}");
            assert.Log($"Actual   (NULL)");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void Is<T>(this TestAssert assert, object p, string message = "")
    {
        Agent agent = assert();

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, $"{nameof(Is)} {GetJsonSafeTypeName(typeof(T))}", Assert(() => p is T, out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Actual   {GetJsonSafeTypeName(p)}");
        }
        agent.TestCaseLogs.EndAssert();
    }
    public static void IsNot<T>(this TestAssert assert, object p, string message = "")
    {
        Agent agent = assert();

        agent.TestCaseLogs.BeginAssert();
        LogResult(agent, $"{nameof(IsNot)} {GetJsonSafeTypeName(typeof(T))}", Assert(() => p is T, out bool pass) ? PASS : FAIL, message);
        if (!pass)
        {
            assert.Log($"Actual   {GetJsonSafeTypeName(p)}");
        }
        agent.TestCaseLogs.EndAssert();
    }
    #endregion

    private static bool Assert(Func<bool> func, out bool pass)
    {
        return pass = func();
    }
    private static void LogResult(Agent agent, string func, string result, string message)
    {
        var caseLogs = agent.TestCaseLogs;
        caseLogs.Output.Set("Func", GetJsonSafeString(func));
        caseLogs.Output.Set("Assert", result);

        if (!string.IsNullOrEmpty(message))
        { caseLogs.Output.Log(message); }
    }
    private static string GetJsonSafeTypeName<T>()
    {
        return GetJsonSafeTypeName(typeof(T));
    }
    private static string GetJsonSafeTypeName(object obj)
    {
        return GetJsonSafeTypeName(obj.GetType());
    }
    private static string GetJsonSafeTypeName(Type type)
    {
        string safeName = type.Name.Split('`')[0];

        if (type.IsGenericType)
        {
            var safeNameList = type.GetGenericArguments()
                .Select(t => GetJsonSafeTypeName(t))
                .ToArray();
            safeName = $"{safeName}[{string.Join(", ", safeNameList)}]";
        }

        return safeName;
    }
    private static string GetJsonSafeString(string value)
    {
        return value.Replace("`", ".");
    }
}

public static class Utility
{
    public static void Log(this TestAssert assert, string logEntry)
    {
        Agent agent = assert();
        var caseLogs = agent.TestCaseLogs;

        caseLogs.Log(logEntry);
    }

    public static void Log(this TestAssertVerbose assert, string logEntry)
    {
        Agent agent = assert(true);
        var caseLogs = agent.TestCaseLogs;

        caseLogs.Log(logEntry);
    }
}