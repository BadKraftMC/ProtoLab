namespace ProtoLab.OpenTest;

public static class Assertions
{
    const string PASS = "Pass";
    const string FAIL = "Fail";

    #region Assertions
    public static void IsTrue(this TestAssert assert, bool condition) =>
        Log(assert(), nameof(IsTrue), condition ? PASS : FAIL, condition ? PASS : FAIL);

    public static void IsFalse(this TestAssert assert, bool condition) =>
        Log(assert(), nameof(IsFalse), !condition ? PASS : FAIL, condition ? PASS : FAIL);

    public static void AreEqual<T>(this TestAssert assert, T p1, T p2, string message = "") =>
        Log(assert(), nameof(AreEqual), p1.Equals(p2) ? PASS : FAIL, string.IsNullOrEmpty(message) ? p1.Equals(p2) ? PASS : FAIL : message);

    public static void AreEqual<T>(this TestAssertVerbose assert, T p1, T p2, string message = "") =>
        Log(assert(true), $"{nameof(AreEqual)} :: {p1}.Equals({p2})", p1.Equals(p2) ? PASS : FAIL, string.IsNullOrEmpty(message) ? p1.Equals(p2) ? PASS : FAIL : message);

    public static void AreNotEqual<T>(this TestAssert assert, T p1, T p2, string message = "") =>
        Log(assert(), nameof(AreNotEqual), !p1.Equals(p2) ? PASS : FAIL, string.IsNullOrEmpty(message) ? !p1.Equals(p2) ? PASS : FAIL : message);

    public static void AreNotEqual<T>(this TestAssertVerbose assert, T p1, T p2, string message = "") =>
        Log(assert(true), $"{nameof(AreNotEqual)} :: !{p1}.Equals({p2})", !p1.Equals(p2) ? PASS : FAIL, string.IsNullOrEmpty(message) ? !p1.Equals(p2) ? PASS : FAIL : message);

    public static void IsNull<T>(this TestAssert assert, T p, string message = "") =>
        Log(assert(), nameof(IsNull), p is null ? PASS : FAIL, string.IsNullOrEmpty(message) ? p is null ? PASS : FAIL : message);

    public static void IsNotNull<T>(this TestAssert assert, T p, string message = "") =>
        Log(assert(), nameof(IsNotNull), p is not null ? PASS : FAIL, string.IsNullOrEmpty(message) ? p is not null ? PASS : FAIL : message);
    #endregion

    private static void Log(TestContext context, string func, string result, string message)
    {
        TestRun run = context.TestRuns.Current;
        run.BeginTest(func, result);

        context.LogTestResult($"{"":55}{func} [{message}]");
    }
}

public static class Utility
{
    public static void Write(this LogWriter testRun, string logEntry)
    {
        var test = testRun();
        var current = test.Current;

        current.Log(logEntry);
    }
}